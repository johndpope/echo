# Macro
MACRO(GROUP_QT_UI_FILES src_files root_path)
		SET(cur_dir ${root_path})
		FOREACH(group_files ${${src_files}})
			STRING(REGEX REPLACE ${cur_dir}/\(.*\) \\1 sgbd_fpath ${group_files})
			STRING(REGEX REPLACE "\(.*\)/.*" \\1 sgbd_group_name ${sgbd_fpath})
			STRING(COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup)
			STRING(REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name})
			IF(sgbd_nogroup)
				SOURCE_GROUP("" FILES ${group_files})   
			ELSE()
				INCLUDE_DIRECTORIES(${sgbd_group_name})
				SOURCE_GROUP(${sgbd_group_name} FILES ${group_files})
				SET(QTUI_HEADER_UI)
				QT5_WRAP_UI(QTUI_HEADER_UI	${group_files})
				SOURCE_GROUP(${sgbd_group_name} FILES ${QTUI_HEADER_UI})   
				SET(ASTUDIO_QT_FILES ${ASTUDIO_QT_FILES} ${QTUI_HEADER_UI})
			ENDIF(sgbd_nogroup) 
		ENDFOREACH(group_files)
ENDMACRO(GROUP_QT_UI_FILES)

# define macro GROUP_QT_MOC_FILES
MACRO(GROUP_QT_MOC_FILES src_files)
	SET(QTUI_MOC_UI)
	QT5_WRAP_CPP(QTUI_MOC_UI	${${src_files}})
	SOURCE_GROUP("Resources\\Generated Files\\Moc" FILES ${QTUI_MOC_UI})   
	SET(ASTUDIO_QT_FILES ${ASTUDIO_QT_FILES} ${QTUI_MOC_UI})
ENDMACRO(GROUP_QT_MOC_FILES)

# configure
SET(CMAKE_INCLUDE_CURRENT_DIR ON)
ADD_DEFINITIONS(-DQT_STATICPLUGIN)

#SET(CMAKE_AUTOMOC On)

# VS配置 http://www.oschina.net/code/explore/mariadb-5.2.4/CMakeLists.txt
IF(MSVC)
	# 禁用特定警告,开启多核编译
	SET(CMAKE_CXX_FLAGS_DEBUG			"${CMAKE_CXX_FLAGS_DEBUG} /wd4996 /wd4819 /MP /openmp")
	SET(CMAKE_CXX_FLAGS_RELEASE			"${CMAKE_CXX_FLAGS_RELEASE} /wd4996 /wd4819 /MP /openmp")
	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO	"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /wd4996 /wd4819  /MP /openmp")
	SET(CMAKE_C_FLAGS_DEBUG				"${CMAKE_C_FLAGS_DEBUG} /wd4996 /wd4819  /MP /openmp")
	SET(CMAKE_C_FLAGS_RELEASE			"${CMAKE_C_FLAGS_RELEASE} /wd4996 /wd4819  /MP /openmp")
	SET(CMAKE_C_FLAGS_RELWITHDEBINFO	"${CMAKE_C_FLAGS_RELWITHDEBINFO} /wd4996 /wd4819  /MP /openmp")
ENDIF(MSVC)

# 
CMAKE_POLICY(SET CMP0020 OLD)

#
IF(CMAKE_SIZEOF_VOID_P EQUAL 4)
	SET(CMAKE_PREFIX_PATH ${ECHO_ROOT_PATH}/editor/Qt/5.10.0/msvc2015)
ELSEIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET(CMAKE_PREFIX_PATH ${ECHO_ROOT_PATH}/editor/Qt/5.10.0/msvc2017_64)
ENDIF()
FIND_PACKAGE(Qt5Core)
FIND_PACKAGE(Qt5Widgets)
FIND_PACKAGE(Qt5UiTools)

INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH})
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/editor/QLibrary/Resources/QLibrary)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/ThirdParty/adrenoSDK/inc)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/engine)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/engine/core/render)

LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

IF(CMAKE_SIZEOF_VOID_P EQUAL 4)
	LINK_DIRECTORIES(${ECHO_DEP_PATH}/AdrenoSDK/Lib/Win32)
	LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/openal-1.1/windows/libs/Win32)
	LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/live2d/Cubism31SdkNative-EAP5/Core/lib/windows/x86)
ELSEIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
	LINK_DIRECTORIES(${ECHO_DEP_PATH}/AdrenoSDK/Lib/x64)
	LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/openal-1.1/windows/libs/Win64)
	LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/live2d/Cubism31SdkNative-EAP5/Core/lib/windows/x86_64)
ENDIF()

# 设置模块名称
SET(MODULE_NAME echo)

# 源文件路径
SET(MODULE_HEADER_PATH ${ECHO_ROOT_PATH}/editor/${MODULE_NAME})
SET(MODULE_SOURCE_PATH ${ECHO_ROOT_PATH}/editor/${MODULE_NAME})
SET(QLIBRARY_PATH      ${ECHO_ROOT_PATH}/editor/QLibrary)

# 递归查找文件
FILE(GLOB_RECURSE HEADER_FILES		${MODULE_HEADER_PATH}/*.h ${MODULE_HEADER_PATH}/*.inl)
FILE(GLOB_RECURSE SOURCE_FILES		${MODULE_SOURCE_PATH}/*.c ${MODULE_SOURCE_PATH}/*.cpp)
FILE(GLOB_RECURSE UI_FILES			${MODULE_SOURCE_PATH}/*.ui)
FILE(GLOB_RECURSE QT_HEADER_FILES	${MODULE_HEADER_PATH}/Game/UI/*.h ${MODULE_HEADER_PATH}/Base/UI/*.h ${MODULE_HEADER_PATH}/Resources/QLibrary/*.h)
FILE(GLOB_RECURSE QL_SOURCE_FILES   ${QLIBRARY_PATH}/*.h ${QLIBRARY_PATH}/*.cpp)
FILE(GLOB_RECURSE QL_HEADER_FILES	${QLIBRARY_PATH}/*.h)
FILE(GLOB_RECURSE QOBJECT_CHILDREN_FILES ${MODULE_HEADER_PATH}/Base/Logic/SignalDispatcher/*.h ${MODULE_HEADER_PATH}/Base/Logic/RCC/*.h ${MODULE_HEADER_PATH}/Effect/Logic/*.h)

GROUP_FILES(HEADER_FILES	${MODULE_HEADER_PATH})
GROUP_FILES(SOURCE_FILES	${MODULE_SOURCE_PATH})
GROUP_FILES(QL_SOURCE_FILES ${QLIBRARY_PATH})
GROUP_QT_UI_FILES(UI_FILES	${MODULE_SOURCE_PATH})
GROUP_QT_MOC_FILES(QT_HEADER_FILES)
GROUP_QT_MOC_FILES(QL_HEADER_FILES)
GROUP_QT_MOC_FILES(QOBJECT_CHILDREN_FILES)

# Qt资源
FILE(GLOB_RECURSE RESOURCE_QT_FILES	${MODULE_SOURCE_PATH}/*.qrc)
FILE(GLOB_RECURSE RESOURCE_FILES	${MODULE_SOURCE_PATH}/*.rc ${MODULE_SOURCE_PATH}/*.qml ${MODULE_SOURCE_PATH}/*.qss)

QT5_ADD_RESOURCES(MODULE_QT_RCC_SRCS ${RESOURCE_QT_FILES})
SOURCE_GROUP("resources" FILES ${MODULE_QT_RCC_SRCS} ${RESOURCE_QT_FILES} ${RESOURCE_FILES}) 

# 添加执行程序
ADD_EXECUTABLE(${MODULE_NAME}
	${HEADER_FILES}
	${SOURCE_FILES}
	${QL_SOURCE_FILES}
	${UI_FILES}
	${RESOURCE_FILES}
	${RESOURCE_QT_FILES}
	${MODULE_QT_RCC_SRCS}
	${ASTUDIO_QT_FILES}
	CMakeLists.txt)

# 链接库
TARGET_LINK_LIBRARIES(${MODULE_NAME} zlib engine 7zip winmm.lib imm32.lib dxgi.lib Shlwapi.lib lua recast freeimage)
TARGET_LINK_LIBRARIES(${MODULE_NAME} Qt5::Core Qt5::Widgets Qt5::UiTools)
TARGET_LINK_LIBRARIES(${MODULE_NAME} Live2DCubismCore.lib pugixml spine box2d)
TARGET_LINK_LIBRARIES(${MODULE_NAME} OpenAL32.lib)
TARGET_LINK_LIBRARIES(${MODULE_NAME} debug libEGL_d.lib optimized libEGL.lib)
TARGET_LINK_LIBRARIES(${MODULE_NAME} debug libGLESv2_d.lib optimized libGLESv2.lib dbghelp.lib Psapi.lib)

# 设置属性
SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES FOLDER "editor")

IF(MSVC)
	# 设置为窗口模式
	#SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:WINDOWS /entry:mainCRTStartup")
	SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS /entry:mainCRTStartup")
	#SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES LINK_FLAGS "/level='requireAdministrator' /uiAccess='false' ")
	
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINER_FLAGS} /SAFESEH:NO")
	SET(CMAKE_EXE_LINKER_FLAGS_VERSION "${CMAKE_EXE_LINER_FLAGS} /SAFESEH:NO")
ENDIF(MSVC)

# 设置项目依赖
ADD_DEPENDENCIES(${MODULE_NAME} engine)
